import { StepLoggerV2 } from "../../core/StepLoggerV2"; // Import StepLoggerV2
// Removed ProblemState, asArray, as2dArray
import { PacificAtlanticInput } from "./types"; // Import PacificAtlanticInput

// Helper function to convert boolean grid to number grid for visualization
const booleanGridToNumber = (grid: boolean[][]): number[][] => {
  return grid.map(row => row.map(cell => (cell ? 1 : 0)));
};

// Helper function to format queue for visualization
const formatQueue = (queue: [number, number][]): string[] => {
  return queue.map(([r, c]) => `${r},${c}`);
};

/**
 * Implements the pacificAtlanticWaterFlow algorithm which finds the cells that can flow to both the Pacific and Atlantic oceans.
 * @param heights - The input 2D array of heights.
 * @returns The steps generated by StepLoggerV2.
 */
export function generateSteps(heights: number[][]) { // Renamed and Exported, Return type inferred
  const l = new StepLoggerV2(); // Instantiate StepLoggerV2

  if (!heights || heights.length === 0 || heights[0].length === 0) {
    l.array2d("heights", [], undefined); // Removed options
    l.array("result", [], undefined, { group: "result" }); // Keep this for now, will fix in l.array step
    l.breakpoint(0); // Initial/Final state
    return l.getSteps();
  }

  const rows = heights.length;
  const cols = heights[0].length;
  const pacificQueue: [number, number][] = [];
  const atlanticQueue: [number, number][] = [];
  const pacificVisited: boolean[][] = Array.from({ length: rows }, () =>
    new Array(cols).fill(false)
  );
  const atlanticVisited: boolean[][] = Array.from({ length: rows }, () =>
    new Array(cols).fill(false)
  );
  const result: [number, number][] = []; // Keep using result for final output

  let currentBreakpoint = 0;

  // Log initial state
  l.simple({ rows });
  l.simple({ cols });
  l.array2d("heights", heights, undefined); // Removed options
  l.array2d("pacificReachable", booleanGridToNumber(pacificVisited), undefined); // Removed options
  l.array2d("atlanticReachable", booleanGridToNumber(atlanticVisited), undefined); // Removed options
  l.array("pacificQueue", formatQueue(pacificQueue), undefined); // Removed invalid 4th argument
  l.array("atlanticQueue", formatQueue(atlanticQueue), undefined); // Removed invalid 4th argument
  l.breakpoint(currentBreakpoint++); // Breakpoint 0

  // Add all cells on the Pacific coast to the queue
  const initialPacificCells: { r: number, c: number }[] = [];
  for (let r = 0; r < rows; r++) {
    if (!pacificVisited[r][0]) {
        pacificQueue.push([r, 0]);
        pacificVisited[r][0] = true;
        initialPacificCells.push({ r, c: 0 });
    }
  }
  for (let c = 1; c < cols; c++) {
     if (!pacificVisited[0][c]) {
        pacificQueue.push([0, c]);
        pacificVisited[0][c] = true;
        initialPacificCells.push({ r: 0, c });
     }
  }

  // Log state after initializing Pacific queue/visited
  // Passing the first pointer from the array for type correction
  l.array2d("pacificReachable", booleanGridToNumber(pacificVisited), initialPacificCells.length > 0 ? initialPacificCells[0] : undefined); // Fixed pointers, removed options
  l.array("pacificQueue", formatQueue(pacificQueue), undefined); // Removed invalid 4th argument
  l.array2d("heights", heights, undefined); // Removed options
  l.breakpoint(currentBreakpoint++); // Breakpoint 1

  // --- Perform BFS from the Pacific coast ---
  let pacificStepCounter = 0; // To potentially limit steps inside BFS if needed
  while (pacificQueue.length > 0) {
    const [r, c] = pacificQueue.shift()!; // Non-null assertion as we check length > 0
    l.simple({ r });
    l.simple({ c });

    const neighborsVisited: { r: number, c: number }[] = [];
    const currentCellHighlight = [{ r, c }];

    for (const [dr, dc] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {
      const nr = r + dr;
      const nc = c + dc;
      l.simple({ nr });
      l.simple({ nc });

      if (
        nr >= 0 && nr < rows && nc >= 0 && nc < cols &&
        !pacificVisited[nr][nc] && heights[nr][nc] >= heights[r][c]
      ) {
        pacificVisited[nr][nc] = true;
        pacificQueue.push([nr, nc]);
        neighborsVisited.push({ r: nr, c: nc });
      }
       // Log state change *after* checking each neighbor? Or after processing all neighbors? Let's log after all neighbors.
       // l.breakpoint(currentBreakpoint++); // Potential breakpoint after each neighbor check
    }

    // Log state after processing neighbors for cell [r, c]
    // Passing the first pointer from the array for type correction
    const pacificCombinedHighlights = [...currentCellHighlight, ...neighborsVisited];
    l.array2d("heights", heights, pacificCombinedHighlights.length > 0 ? pacificCombinedHighlights[0] : undefined); // Fixed pointers, removed options
    l.array2d("pacificReachable", booleanGridToNumber(pacificVisited), pacificCombinedHighlights.length > 0 ? pacificCombinedHighlights[0] : undefined); // Fixed pointers, removed options
    l.array("pacificQueue", formatQueue(pacificQueue), undefined); // Removed invalid 4th argument
    // Reset neighbor indices?
    l.simple({ nr: undefined });
    l.simple({ nc: undefined });
    l.breakpoint(currentBreakpoint++); // Breakpoint inside Pacific BFS loop

    pacificStepCounter++;
    // Optional: Add a check to limit steps if BFS becomes too long for visualization
    // if (pacificStepCounter > MAX_BFS_STEPS) break;
  }
  // Reset r/c after loop
  l.simple({ r: undefined });
  l.simple({ c: undefined });

  // --- Add all cells on the Atlantic coast to the queue ---
  const initialAtlanticCells: { r: number, c: number }[] = [];
   for (let r = 0; r < rows; r++) {
     if (!atlanticVisited[r][cols - 1]) {
        atlanticQueue.push([r, cols - 1]);
        atlanticVisited[r][cols - 1] = true;
        initialAtlanticCells.push({ r, c: cols - 1 });
     }
   }
   for (let c = 0; c < cols - 1; c++) {
     if (!atlanticVisited[rows - 1][c]) {
        atlanticQueue.push([rows - 1, c]);
        atlanticVisited[rows - 1][c] = true;
        initialAtlanticCells.push({ r: rows - 1, c });
     }
   }

  // Log state after initializing Atlantic queue/visited
  // Passing the first pointer from the array for type correction
  l.array2d("atlanticReachable", booleanGridToNumber(atlanticVisited), initialAtlanticCells.length > 0 ? initialAtlanticCells[0] : undefined); // Fixed pointers, removed options
  l.array("atlanticQueue", formatQueue(atlanticQueue), undefined); // Removed invalid 4th argument
  l.array2d("pacificReachable", booleanGridToNumber(pacificVisited), undefined); // Removed options
  l.breakpoint(currentBreakpoint++);

  // --- Perform BFS from the Atlantic coast ---
  let atlanticStepCounter = 0;
  while (atlanticQueue.length > 0) {
    const [r, c] = atlanticQueue.shift()!;
    l.simple({ r });
    l.simple({ c });

    const neighborsVisited: { r: number, c: number }[] = [];
    const currentCellHighlight = [{ r, c }];

    for (const [dr, dc] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {
      const nr = r + dr;
      const nc = c + dc;
      l.simple({ nr });
      l.simple({ nc });

      if (
        nr >= 0 && nr < rows && nc >= 0 && nc < cols &&
        !atlanticVisited[nr][nc] && heights[nr][nc] >= heights[r][c]
      ) {
        atlanticVisited[nr][nc] = true;
        atlanticQueue.push([nr, nc]);
        neighborsVisited.push({ r: nr, c: nc });
      }
       // l.breakpoint(currentBreakpoint++); // Potential breakpoint after each neighbor check
    }

    // Log state after processing neighbors for cell [r, c]
    // Passing the first pointer from the array for type correction
    const atlanticCombinedHighlights = [...currentCellHighlight, ...neighborsVisited];
    l.array2d("heights", heights, atlanticCombinedHighlights.length > 0 ? atlanticCombinedHighlights[0] : undefined); // Fixed pointers, removed options
    l.array2d("atlanticReachable", booleanGridToNumber(atlanticVisited), atlanticCombinedHighlights.length > 0 ? atlanticCombinedHighlights[0] : undefined); // Fixed pointers, removed options
    l.array("atlanticQueue", formatQueue(atlanticQueue), undefined); // Removed invalid 4th argument
    // Reset neighbor indices?
    l.simple({ nr: undefined });
    l.simple({ nc: undefined });
    l.breakpoint(currentBreakpoint++); // Breakpoint inside Atlantic BFS loop

    atlanticStepCounter++;
    // if (atlanticStepCounter > MAX_BFS_STEPS) break;
  }
   // Reset r/c after loop
   l.simple({ r: undefined });
   l.simple({ c: undefined });


  // --- Find the cells that can flow to both oceans ---
  const resultCellsHighlight: { r: number, c: number }[] = [];
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      // Check if the cell is reachable from both oceans
      if (pacificVisited[r][c] && atlanticVisited[r][c]) { // Corrected typo: j -> c
        result.push([r, c]);
        resultCellsHighlight.push({ r, c });
      }
    }
  }

  // Log final state including the result
  // Passing the first pointer from the array for type correction
  l.array2d("heights", heights, resultCellsHighlight.length > 0 ? resultCellsHighlight[0] : undefined); // Fixed pointers, removed options
  l.array2d("pacificReachable", booleanGridToNumber(pacificVisited), resultCellsHighlight.length > 0 ? resultCellsHighlight[0] : undefined); // Fixed pointers, removed options
  l.array2d("atlanticReachable", booleanGridToNumber(atlanticVisited), resultCellsHighlight.length > 0 ? resultCellsHighlight[0] : undefined); // Fixed pointers, removed options
  l.array("result", formatQueue(result), undefined); // Removed invalid 4th argument
  l.breakpoint(currentBreakpoint++); // Final breakpoint

  return l.getSteps(); // Return the collected steps
}

// Removed code, title, getInput, Problem export comment might be outdated.
